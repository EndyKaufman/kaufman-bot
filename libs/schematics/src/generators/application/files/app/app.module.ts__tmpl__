import { InjectBot, NestjsGrammyModule } from '@grammyjs/nestjs';
import { BotInGroupsModule } from '@kaufman-bot/bot-in-groups-server';
import { BotCommandsModule } from '@kaufman-bot/core-server';
import { DebugMessagesModule } from '@kaufman-bot/debug-messages-server';
import { FactsGeneratorModule } from '@kaufman-bot/facts-generator-server';
import { LanguageSwitcherModule } from '@kaufman-bot/language-switcher-server';
import {
  DISABLE_SHORT_COMMANDS__BEFORE_HOOK,
  ShortCommandsModule,
} from '@kaufman-bot/short-commands-server';
import { CustomInjectorModule } from 'nestjs-custom-injector';
import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';
import env from 'env-var';
import { Bot, Context, webhookCallback } from 'grammy';
import {
  getDefaultTranslatesModuleOptions,
  TranslatesModule,
  TRANSLATES_DEFAULT_LOCALE,
} from 'nestjs-translates';
import { join } from 'path';
import { AppService } from './app.service';
 
const TELEGRAM_BOT_WEB_HOOKS_DOMAIN = env
  .get('TELEGRAM_BOT_WEB_HOOKS_DOMAIN')
  .asString();
const TELEGRAM_BOT_WEB_HOOKS_PATH = env
  .get('TELEGRAM_BOT_WEB_HOOKS_PATH')
  .asString();

const BOT_NAMES = env.get('BOT_NAMES').required().asArray();

@Module({
  imports: [
    CustomInjectorModule.forRoot(),
    NestjsGrammyModule.forRoot({
      token: env.get('TELEGRAM_BOT_TOKEN').required().asString(),
      ...(TELEGRAM_BOT_WEB_HOOKS_DOMAIN && TELEGRAM_BOT_WEB_HOOKS_PATH
        ? {
            useWebhook: true,
          }
        : {}),
    }),
    TranslatesModule.forRoot(
      getDefaultTranslatesModuleOptions({
        localePaths: [
          join(__dirname, 'assets', 'i18n'),
          join(__dirname, 'assets', 'i18n', 'getText'),
          join(__dirname, 'assets', 'i18n', 'class-validator-messages'),
          join(__dirname, 'assets', 'i18n', 'core-server'),
          join(__dirname, 'assets', 'i18n', 'bot-in-groups-server'),
          join(__dirname, 'assets', 'i18n', 'debug-messages-server'),
          join(__dirname, 'assets', 'i18n', 'facts-generator-server'),
          join(__dirname, 'assets', 'i18n', 'html-scraper-server'),
          join(__dirname, 'assets', 'i18n', 'language-switcher-server'),
          join(__dirname, 'assets', 'i18n', 'short-commands-server'),
        ],
        vendorLocalePaths: [join(__dirname, 'assets', 'i18n')],
        locales: [TRANSLATES_DEFAULT_LOCALE, 'ru'],
      })
    ),
    DebugMessagesModule.forRoot(),
    BotCommandsModule.forRoot({
      admins: env.get('TELEGRAM_BOT_ADMINS').default('').asArray(','),
      commit: env.get('DEPLOY_COMMIT').default('').asString(),
      date: env.get('DEPLOY_DATE').default('').asString(),
      version: env.get('DEPLOY_VERSION').default('').asString(),
      botMeetingInformation: {
        [TRANSLATES_DEFAULT_LOCALE]: [`Hello! I'm ${BOT_NAMES[0]} ðŸ˜‰`, 'Hello!', 'Hello ðŸ––'],
      },
    }),
    ShortCommandsModule.forRoot({
      commands: {
        [TRANSLATES_DEFAULT_LOCALE]: {
          '*fact*|history': 'get facts',
          '*what you can do*|faq': 'help',
          'disable debug': 'debug off',
          'enable debug': 'debug on',
        },
      },
    }),
    BotInGroupsModule.forRoot({
      defaultGroupGlobalContext: {
        [DISABLE_SHORT_COMMANDS__BEFORE_HOOK]: true,
      },
      botNames: {
        [TRANSLATES_DEFAULT_LOCALE]: BOT_NAMES,
      },
      botMeetingInformation: {
        [TRANSLATES_DEFAULT_LOCALE]: [`Hello! I'm ${BOT_NAMES[0]} ðŸ˜‰`, 'Hello!', 'Hello ðŸ––'],
      },
    }),
    LanguageSwitcherModule.forRoot(),
    FactsGeneratorModule.forRoot(),
  ],
  providers: [AppService],
})
export class AppModule implements NestModule {
  constructor(
    @InjectBot()
    private readonly bot: Bot<Context>
  ) {}

  configure(consumer: MiddlewareConsumer) {
    const webhook = env.get('TELEGRAM_BOT_WEB_HOOKS_PATH').asString();
    if (webhook) {
      consumer.apply(webhookCallback(this.bot, 'express')).forRoutes(webhook);
    }
  }
}